{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","interpretDecimalInput","inputType","inputPrecision","inputScale","precision","scale","alert","parseInt","DatatypeInput","props","id","operand","className","for","name","value","operandValue","onChange","handleChange","type","precision_input","scale_input","CalculatorForm","state","first_operand","second_operand","first_precision_input","first_scale_input","second_precision_input","second_scale_input","operator","resultant_datatype","bind","handleSubmit","event","data","target","getAttribute","undefined","console","log","this","setState","preventDefault","fop","sop","result_dt","calcDetails","fop_precision","fop_scale","sop_precision","sop_scale","result_precision","result_scale","fop_decimal","sop_decimal","Math","max","min","calcResultantDecimal","onSubmit","onClick","e","length","toUpperCase","href","class","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e92f0078.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction interpretDecimalInput(inputType, inputPrecision, inputScale) {\r\n  let precision = 0;\r\n  let scale = 0;\r\n\r\n  if (inputType === \"decimal\") {\r\n    if (inputPrecision) {\r\n      precision = parseInt(inputPrecision);\r\n    }\r\n    else {\r\n      alert(\"Please specify the 'Precision' value for the decimal data type.\"); //else the default value of 18 is used\r\n      return;\r\n      // fop_precision = 18;\r\n    }\r\n\r\n    if (inputScale) {\r\n      scale = parseInt(inputScale);\r\n    }\r\n    else {\r\n      alert(\"Please specify the 'Scale' value for the decimal data type.\"); // else the default value of 0 is used\r\n      return;\r\n      // fop_scale = 0;\r\n    }\r\n  }\r\n  else {\r\n    if (inputType === \"smallint\") {\r\n      precision = 5;\r\n    }\r\n    else if (inputType === \"int\") {\r\n      precision = 10;\r\n    }\r\n    else if (inputType === \"bigint\") {\r\n      precision = 19;\r\n    }\r\n    else {\r\n      alert(\"Invalid data type: \" + inputType);\r\n      return;\r\n    }\r\n    scale = 0;\r\n  }\r\n\r\n  return { \"precision\": precision, \"scale\": scale };\r\n}\r\n\r\n\r\nfunction calcResultantDecimal(calcDetails) {\r\n  const fop = calcDetails.first_operand;\r\n  const sop = calcDetails.second_operand;\r\n  const operator = calcDetails.operator;\r\n  let fop_precision = 0;\r\n  let fop_scale = 0;\r\n  let sop_precision = 0;\r\n  let sop_scale = 0;\r\n  let result_precision = 0;\r\n  let result_scale = 0;\r\n\r\n  let fop_decimal = interpretDecimalInput(fop, calcDetails.first_precision_input, calcDetails.first_scale_input);\r\n  if (fop_decimal) {\r\n    fop_precision = fop_decimal.precision;\r\n    fop_scale = fop_decimal.scale;\r\n  }\r\n  else {\r\n    return;\r\n  }\r\n\r\n  let sop_decimal = interpretDecimalInput(sop, calcDetails.second_precision_input, calcDetails.second_scale_input);\r\n  if (sop_decimal) {\r\n    sop_precision = sop_decimal.precision;\r\n    sop_scale = sop_decimal.scale;\r\n  }\r\n  else {\r\n    return;\r\n  }\r\n\r\n  if (fop_scale > fop_precision || sop_scale > sop_precision) {\r\n    alert(\"The scale value must be less than or equal to the precision value.\");\r\n    return;\r\n  }\r\n\r\n  if (operator === \"add\" || operator === \"sub\") {\r\n    result_scale = Math.max(fop_scale, sop_scale)\r\n    result_precision = Math.max(fop_precision - fop_scale, sop_precision - sop_scale) + 1 + result_scale;\r\n  }\r\n  else if (operator === \"mul\") {\r\n    result_scale = fop_scale + sop_scale;\r\n    result_precision = fop_precision + sop_precision + 1;\r\n  }\r\n  else if (operator === \"divi\") {\r\n    result_scale = Math.max(4, fop_scale + sop_precision - sop_scale + 1);\r\n    result_precision = fop_precision - fop_scale + sop_scale + result_scale;\r\n\r\n    if (result_scale > 100) {\r\n      result_precision = result_precision - (result_scale - 37);\r\n      result_scale = 37;\r\n    }\r\n\r\n    if (result_precision > 38) {\r\n      result_precision = 38;\r\n      result_scale = Math.max(38 + result_scale - result_precision, 4);\r\n    }\r\n  }\r\n  else {\r\n    alert(\"Operator not supported yet!\");\r\n    return;\r\n  }\r\n\r\n  result_precision = Math.min(38, result_precision)\r\n  result_scale = Math.min(37, result_scale)\r\n\r\n  return \"decimal(\" + result_precision + \", \" + result_scale + \")\";\r\n}\r\n\r\nfunction DatatypeInput(props) {\r\n  return (\r\n    <div id={props.operand + \"-operand-div\"} className=\"input-divs\">\r\n      <label for={props.operand} className=\"input-lbl\" id={props.operand + \"-lbl\"} > {props.operand} Operand:</label>\r\n      <div className=\"datatype-section\">\r\n        <select className=\"datatype-inputs\" name={props.operand + \"_operand\"} id={props.operand} value={props.operandValue} onChange={props.handleChange}>\r\n          <option value=\"decimal\">Decimal</option>  \r\n          <option value=\"smallint\">SmallInt/Int2</option>\r\n          <option value=\"int\">Int/Int4</option>\r\n          <option value=\"bigint\">BigInt/Int8</option>\r\n          <option value=\"float\">Float/Float4</option>\r\n          <option value=\"double\">Double/Float8</option>\r\n        </select>\r\n\r\n        <div className=\"decimal_section\">\r\n          <div className=\"prec_section\">\r\n            <label for=\"precision_input\" className={\"prec_arg_lbl\" + (props.operandValue === \"decimal\" ? \"\" : \" element_hidden\")}> Precision</label>\r\n            <input type=\"text\" name={props.operand + \"_precision_input\"} className={\"precision_input\" + (props.operandValue === \"decimal\" ? \"\" : \" element_hidden\")} value={props.precision_input} onChange={props.handleChange} />\r\n          </div>\r\n\r\n          <div className=\"scale_section\">\r\n            <label for=\"scale_input\" className={\"scale_arg_lbl\" + (props.operandValue === \"decimal\" ? \"\" : \" element_hidden\")}> Scale</label>\r\n            <input type=\"text\" name={props.operand + \"_scale_input\"} className={\"scale_input\" + (props.operandValue === \"decimal\" ? \"\" : \" element_hidden\")} value={props.scale_input} onChange={props.handleChange} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nclass CalculatorForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first_operand: \"decimal\",\r\n      second_operand: \"decimal\",\r\n      first_precision_input: \"\",\r\n      first_scale_input: \"\",\r\n      second_precision_input: \"\",\r\n      second_scale_input: \"\",\r\n      operator: \"\",\r\n      resultant_datatype: \"\"\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event, data) {\r\n    const target = event.target;\r\n    const name = target.getAttribute('name');\r\n    let value = data === undefined ? target.value : data;\r\n    console.log(\"name: \" + name);\r\n    console.log(\"value: \" + value);\r\n    if ((name === \"first_precision_input\" || name === \"second_precision_input\") && parseInt(value) > 38) {\r\n      alert(\"Max. precision possible is 38\");\r\n      value = 38;\r\n    }\r\n\r\n    if ((name === \"first_scale_input\" || name === \"second_scale_input\") && parseInt(value) > 37) {\r\n      alert(\"Max. scale possible is 37.\");\r\n      value = 37;\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const fop = this.state.first_operand;\r\n    const sop = this.state.second_operand;\r\n    let result_dt = \"\";\r\n\r\n    if (!this.state.operator) {\r\n      alert(\"Please select the operator involved in the computation by clicking on it.\");\r\n      return;\r\n    }\r\n\r\n    if (fop === \"double\" || sop === \"double\") {\r\n      result_dt = \"double\";\r\n    }\r\n    else if (fop === \"float\" || sop === \"float\") {\r\n      if (fop === sop) {\r\n        result_dt = \"float\";\r\n      }\r\n      else {\r\n        result_dt = \"double\";\r\n      }\r\n    }\r\n    else if (fop === \"decimal\" || sop === \"decimal\") {\r\n      result_dt = calcResultantDecimal(this.state);\r\n    }\r\n    else if (fop === \"bigint\" || sop === \"bigint\") {\r\n      result_dt = \"bigint\";\r\n    }\r\n    else if (fop === \"int\" || sop === \"int\") {\r\n      result_dt = \"int\";\r\n    }\r\n    else {\r\n      result_dt = \"smallint\";\r\n    }\r\n\r\n    if (result_dt) {\r\n      this.setState({\r\n        resultant_datatype: result_dt\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"App-header\">Redshift Calculator</div>\r\n        <div>\r\n          <form onSubmit={this.handleSubmit}>\r\n\r\n            <DatatypeInput operand=\"first\" operandValue={this.state.first_operand} precision_input={this.state.first_precision_input} scale_input={this.state.first_scale_input} handleChange={this.handleChange} />\r\n\r\n            <ul className=\"operator-container\">\r\n              <li className=\"operator-item\">\r\n                <div name=\"operator\" className={this.state.operator === \"add\" ? \"selected\" : \"\"} onClick={e => this.handleChange(e, \"add\")}>\r\n                  <span className={this.state.operator === \"add\" ? \"selected\" : \"\"}>+</span>\r\n                </div>\r\n              </li>\r\n              <li className=\"operator-item\">\r\n                <div name=\"operator\" className={this.state.operator === \"sub\" ? \" selected\" : \"\"} onClick={e => this.handleChange(e, \"sub\")}>\r\n                  <span className={this.state.operator === \"sub\" ? \" selected\" : \"\"}>-</span>\r\n                </div>\r\n              </li>\r\n              <li className=\"operator-item\">\r\n                <div name=\"operator\" className={this.state.operator === \"divi\" ? \" selected\" : \"\"} onClick={e => this.handleChange(e, \"divi\")}>\r\n                  <span className={this.state.operator === \"divi\" ? \" selected\" : \"\"}>/</span>\r\n                </div>\r\n              </li>\r\n              <li className=\"operator-item\">\r\n                <div name=\"operator\" className={this.state.operator === \"mul\" ? \" selected\" : \"\"} onClick={e => this.handleChange(e, \"mul\")}>\r\n                  <span className={this.state.operator === \"mul\" ? \" selected\" : \"\"}>X</span>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n\r\n            <DatatypeInput operand=\"second\" operandValue={this.state.second_operand} precision_input={this.state.second_precision_input} scale_input={this.state.second_scale_input} handleChange={this.handleChange} />\r\n\r\n            <div className=\"resultant-div\">\r\n              <input type=\"submit\" value=\"Submit\" className=\"submit-btn\" />\r\n              <div className={\"resultant-datatype\"}>\r\n                <span className={this.state.resultant_datatype.length > 0 ? \"res_avail\" : \"\"}>\r\n                  {this.state.resultant_datatype.length > 0 ? this.state.resultant_datatype.toUpperCase() : \"Resultant Data Type\" }\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"footer\">\r\n              <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_numeric_computations201.html\" className=\"reference\" target=\"blank\">Redshift documentation on \"Numeric Computation\"</a>\r\n              <br/>\r\n              Designed &amp; Built by <a href=\"https://adarshgupta.github.io/\" target=\"blank\">Adarsh Gupta</a>\r\n              &nbsp;<a href=\"https://github.com/AdarshGupta/Redshift-calc\" target=\"blank\"><i class=\"fa-brands fa-github\"></i></a>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CalculatorForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}